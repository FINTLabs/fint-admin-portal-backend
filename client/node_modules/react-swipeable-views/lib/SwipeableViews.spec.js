"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/builtin/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _chai = require("chai");

var _sinon = require("sinon");

var _SwipeableViews = _interopRequireWildcard(require("./SwipeableViews"));

function simulateSwipeMove(wrapper, event) {
  return wrapper.instance().handleSwipeMove((0, _objectSpread2.default)({
    preventDefault: function preventDefault() {}
  }, event));
}

var _ref = _react.default.createElement(_SwipeableViews.default, null, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref2 = _react.default.createElement("div", null, 'slide n°1');

var _ref3 = _react.default.createElement("div", null, 'slide n°2');

var _ref4 = _react.default.createElement("div", null, 'slide n°1');

var _ref5 = _react.default.createElement("div", null, 'slide n°1');

var _ref6 = _react.default.createElement("div", null, 'slide n°1');

var _ref7 = _react.default.createElement(_SwipeableViews.default, null, _react.default.createElement("div", null, 'slide n°1'));

var _ref8 = _react.default.createElement(_SwipeableViews.default, {
  animateTransitions: false
}, _react.default.createElement("div", null, 'slide n°1'));

var _ref9 = _react.default.createElement(_SwipeableViews.default, null, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'));

var _ref10 = _react.default.createElement(_SwipeableViews.default, {
  axis: "y"
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'));

var _ref11 = _react.default.createElement(_SwipeableViews.default, {
  index: 1
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'));

var _ref12 = _react.default.createElement(_SwipeableViews.default, {
  index: 0
}, _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'), _react.default.createElement("div", null, 'slide n°6'));

var _ref13 = _react.default.createElement(_SwipeableViews.default, null, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'));

var _ref14 = _react.default.createElement("div", null);

var _ref15 = _react.default.createElement("div", null, 'slide n°1');

var _ref16 = _react.default.createElement("div", null, 'slide n°2');

var _ref17 = _react.default.createElement("div", null, 'slide n°3');

var _ref18 = _react.default.createElement(_SwipeableViews.default, {
  index: 1
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref19 = _react.default.createElement(_SwipeableViews.default, {
  index: 1
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref20 = _react.default.createElement(_SwipeableViews.default, {
  index: 1,
  disableLazyLoading: true
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref21 = _react.default.createElement("div", null, 'slide n°1');

var _ref22 = _react.default.createElement("div", null, 'slide n°2');

var _ref23 = _react.default.createElement("div", null, 'slide n°3');

describe('SwipeableViews', function () {
  describe('prop: children', function () {
    it('should render the children', function () {
      var wrapper = (0, _enzyme.mount)(_ref);

      _chai.assert.strictEqual(wrapper.text(), 'slide n°1slide n°2slide n°3slide n°4slide n°5', 'Should render each slide.');
    });
  });
  describe('prop: hysteresis', function () {
    function createWrapper(hysteresis) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        hysteresis: hysteresis,
        onChangeIndex: (0, _sinon.spy)()
      }, _ref2, _ref3));
      wrapper.simulate('touchStart', {
        touches: [{
          pageX: 155,
          pageY: 50
        }]
      });
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 150,
          pageY: 50
        }]
      });
      var instance = wrapper.instance();
      instance.viewLength = 200;
      return wrapper;
    }

    it('should not change slide when swipe was not enough', function () {
      var wrapper = createWrapper();
      var instance = wrapper.instance();
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 80,
          pageY: 50
        }]
      });
      instance.vx = 0;
      wrapper.simulate('touchEnd');

      _chai.assert.strictEqual(instance.indexCurrent, 0);
    });
    it('should change slide after long swipe', function () {
      var wrapper = createWrapper();
      var instance = wrapper.instance();
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 20,
          pageY: 50
        }]
      });
      instance.vx = 0;
      wrapper.simulate('touchEnd');

      _chai.assert.strictEqual(instance.indexCurrent, 1);

      _chai.assert.deepEqual(wrapper.props().onChangeIndex.args, [[1, 0, {
        reason: 'swipe'
      }]]);
    });
    it('should change slider hysteresis via prop', function () {
      var wrapper = createWrapper(0.3);
      var instance = wrapper.instance();
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 80,
          pageY: 50
        }]
      });
      instance.vx = 0;
      wrapper.simulate('touchEnd');

      _chai.assert.strictEqual(instance.indexCurrent, 1);
    });
  });
  describe('prop: onTouchStart', function () {
    it('should trigger when we bind it', function () {
      var handleTouchStart = (0, _sinon.spy)();
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        onTouchStart: handleTouchStart
      }, _ref4));
      wrapper.simulate('touchStart', {
        touches: [{}]
      });

      _chai.assert.strictEqual(handleTouchStart.callCount, 1, 'Should be called');
    });
    it('should trigger when we disable the swipe', function () {
      var handleTouchStart = (0, _sinon.spy)();
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        disabled: true,
        onTouchStart: handleTouchStart
      }, _ref5));
      wrapper.simulate('touchStart', {
        touches: [{}]
      });

      _chai.assert.strictEqual(handleTouchStart.callCount, 1, 'Should be called');
    });
  });
  describe('prop: onTouchEnd', function () {
    it('should trigger when we bind it', function () {
      var handleTouchEnd = (0, _sinon.spy)();
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        onTouchEnd: handleTouchEnd
      }, _ref6));
      wrapper.simulate('touchEnd');

      _chai.assert.strictEqual(handleTouchEnd.callCount, 1, 'Should be called');
    });
  });
  describe('prop: animateTransitions', function () {
    it('should use a spring if animateTransitions is true', function () {
      var wrapper = (0, _enzyme.mount)(_ref7, {
        disableLifecycleMethods: true
      });
      wrapper.setProps({
        index: 1
      });

      _chai.assert.include(wrapper.childAt(0).childAt(0).props().style, {
        WebkitFlexDirection: 'row',
        transform: 'translate(-100%, 0)',
        WebkitTransform: 'translate(-100%, 0)',
        WebkitTransition: '-webkit-transform 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s',
        transition: 'transform 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s'
      });
    });
    it('should not use a spring if animateTransitions is false', function () {
      var wrapper = (0, _enzyme.shallow)(_ref8, {
        disableLifecycleMethods: true
      });

      _chai.assert.include(wrapper.childAt(0).props().style, {
        transition: 'all 0s ease 0s'
      });
    });
  });
  describe('swipe detection', function () {
    var instance;
    var wrapper;
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_ref9);
      wrapper.simulate('touchStart', {
        touches: [{
          pageX: 50,
          pageY: 50
        }]
      });
      instance = wrapper.instance();
      instance.viewLength = 200;
    });
    it('should not detect a swipe when scrolling', function () {
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 50,
          pageY: 60
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, false, 'Should not detect a swipe');
    });
    it('should detect a swipe when doing a clear movement', function () {
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 60,
          pageY: 50
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, true, 'Should detect a swipe');
    });
    it('should wait for a clear movement to detect a swipe', function () {
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 48,
          pageY: 50
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, undefined, 'We do not know yet');

      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 50,
          pageY: 48
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, undefined, 'We do not know yet');

      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 40,
          pageY: 50
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, true, 'Should detect a swipe');
    });
  });
  describe('vertical swipe detection', function () {
    var instance;
    var wrapper;
    beforeEach(function () {
      wrapper = (0, _enzyme.mount)(_ref10);
      wrapper.simulate('touchStart', {
        touches: [{
          pageX: 50,
          pageY: 50
        }]
      });
      instance = wrapper.instance();
      instance.viewLength = 200;
    });
    it('should let the parent handle the swipe', function () {
      simulateSwipeMove(wrapper, {
        touches: [{
          pageX: 50,
          pageY: 51
        }]
      });

      _chai.assert.strictEqual(instance.isSwiping, false);
    });
  });
  describe('nested views', function () {
    var wrapperParent;
    var wrapperNester;
    beforeEach(function () {
      wrapperParent = (0, _enzyme.mount)(_ref11);
      wrapperNester = (0, _enzyme.mount)(_ref12);
      var touchStartEvent = {
        touches: [{
          pageX: 50,
          pageY: 0
        }]
      };
      wrapperNester.simulate('touchStart', touchStartEvent);
      wrapperParent.simulate('touchStart', touchStartEvent);
      var instance1 = wrapperParent.instance();
      instance1.viewLength = 200;
      instance1.startIndex = 1;
      var instance2 = wrapperNester.instance();
      instance2.viewLength = 200;
    });
    afterEach(function () {
      wrapperNester.simulate('touchEnd');
      wrapperParent.simulate('touchEnd');
    });
    it('only the nested swipe should respond to the touch', function () {
      var touchMoveEvent1 = {
        touches: [{
          pageX: 45,
          pageY: 0
        }]
      };
      var instanceNester = wrapperNester.instance();
      var instanceParent = wrapperParent.instance();
      simulateSwipeMove(wrapperNester, touchMoveEvent1);
      simulateSwipeMove(wrapperParent, touchMoveEvent1);
      var touchMoveEvent2 = {
        touches: [{
          pageX: 40,
          pageY: 0
        }]
      };
      simulateSwipeMove(wrapperNester, touchMoveEvent2);
      simulateSwipeMove(wrapperParent, touchMoveEvent2);

      _chai.assert.strictEqual(instanceNester.indexCurrent, 0.025);

      _chai.assert.strictEqual(instanceParent.indexCurrent, 1);
    });
    it('only the parent swipe should respond to the touch', function () {
      var touchMoveEvent1 = {
        touches: [{
          pageX: 55,
          pageY: 0
        }]
      };
      var instanceNester = wrapperNester.instance();
      var instanceParent = wrapperParent.instance();
      simulateSwipeMove(wrapperNester, touchMoveEvent1);
      simulateSwipeMove(wrapperParent, touchMoveEvent1);
      var touchMoveEvent2 = {
        touches: [{
          pageX: 60,
          pageY: 0
        }]
      };
      simulateSwipeMove(wrapperNester, touchMoveEvent2);
      simulateSwipeMove(wrapperParent, touchMoveEvent2);

      _chai.assert.strictEqual(instanceNester.indexCurrent, 0);

      _chai.assert.strictEqual(instanceParent.indexCurrent, 0.975);
    });
  });
  describe('prop: index', function () {
    it('should only update the state when the index change', function () {
      var wrapper = (0, _enzyme.mount)(_ref13);
      var instance = wrapper.instance();

      _chai.assert.strictEqual(instance.indexCurrent, 0, 'should start at the begining');

      wrapper.setProps({
        index: 1
      });

      _chai.assert.strictEqual(instance.indexCurrent, 1, 'should update the state');

      instance.indexCurrent = 0;
      wrapper.setProps({
        index: 1
      });

      _chai.assert.strictEqual(instance.indexCurrent, 0, 'should keep the same state');
    });
  });
  describe('findNativeHandler', function () {
    it('should work in a simple case', function () {
      var hasFoundNativeHandler = (0, _SwipeableViews.findNativeHandler)({
        domTreeShapes: [{
          scrollLeft: 0,
          scrollWidth: 200,
          clientWidth: 100
        }],
        indexCurrent: 1,
        index: 1.1,
        axis: 'x'
      });

      _chai.assert.strictEqual(hasFoundNativeHandler, true);
    });
    it('should work with different axis', function () {
      var hasFoundNativeHandler = (0, _SwipeableViews.findNativeHandler)({
        domTreeShapes: [{
          scrollTop: 0,
          scrollHeight: 100,
          clientHeight: 100
        }],
        indexCurrent: 1,
        index: 1.1,
        axis: 'y'
      });

      _chai.assert.strictEqual(hasFoundNativeHandler, false);
    });
  });
  describe('getDomTreeShapes', function () {
    beforeEach(function () {
      (0, _sinon.stub)(window, 'getComputedStyle').returns({
        getPropertyValue: function getPropertyValue() {
          return '';
        }
      });
    });
    afterEach(function () {
      window.getComputedStyle.restore();
    });
    it('should stop at the data-swipeable attribute', function () {
      var rootNode = {};
      var optionNode = {
        hasAttribute: function hasAttribute() {
          return true;
        },
        parentNode: rootNode
      };
      var targetNode = {
        hasAttribute: function hasAttribute() {
          return false;
        },
        parentNode: optionNode,
        clientWidth: 10,
        scrollWidth: 20,
        style: {}
      };
      var domTreeShapes = (0, _SwipeableViews.getDomTreeShapes)(targetNode, optionNode);

      _chai.assert.strictEqual(domTreeShapes.length, 1);

      _chai.assert.strictEqual(domTreeShapes[0].clientWidth, 10);
    });
  });
  describe('prop: slideClassName', function () {
    it('should apply a className prop to every rendered slide component', function () {
      var Slide = function Slide() {
        return _ref14;
      };

      var classNameToApply = 'someclassname';
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        slideClassName: classNameToApply
      }, _react.default.createElement(Slide, null), _react.default.createElement(Slide, null)));

      _chai.assert.strictEqual(wrapper.find(Slide).everyWhere(function (slide) {
        return slide.parent().props().className === classNameToApply;
      }), true, 'should apply the className prop');
    });
  });
  describe('tabs', function () {
    it('should reset the scroll position and call onChangeIndex', function () {
      var handleScroll = (0, _sinon.spy)();
      var handleChangeIndex = (0, _sinon.spy)();
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_SwipeableViews.default, {
        index: 1,
        onScroll: handleScroll,
        onChangeIndex: handleChangeIndex
      }, _ref15, _ref16, _ref17), {
        disableLifecycleMethods: true
      });
      var rootNode = {
        scrollLeft: 80,
        clientWidth: 100
      };
      wrapper.instance().rootNode = rootNode;
      wrapper.instance().handleScroll({
        target: rootNode
      });

      _chai.assert.strictEqual(handleScroll.callCount, 1, 'should forward the event');

      _chai.assert.strictEqual(rootNode.scrollLeft, 0, 'should reset the scroll position');

      _chai.assert.strictEqual(handleChangeIndex.callCount, 1, 'should detect a new index');

      _chai.assert.deepEqual(handleChangeIndex.args[0], [2, 1, {
        reason: 'focus'
      }]);
    });
  });
  describe('prop: disableLazyLoading', function () {
    describe('false', function () {
      it('should render the right child', function () {
        var wrapper = (0, _enzyme.shallow)(_ref18, {
          disableLifecycleMethods: true
        });

        _chai.assert.strictEqual(wrapper.text(), 'slide n°2');

        _chai.assert.shallowDeepEqual(wrapper.childAt(0).props().style, {
          transition: 'all 0s ease 0s',
          transform: undefined
        });
      });
      it('should render all the children during the second render', function () {
        var wrapper = (0, _enzyme.mount)(_ref19, {
          disableLifecycleMethods: true
        });

        _chai.assert.strictEqual(wrapper.text(), 'slide n°1slide n°2slide n°3slide n°4slide n°5');

        _chai.assert.shallowDeepEqual(wrapper.childAt(0).childAt(0).props().style, {
          transition: 'all 0s ease 0s',
          transform: 'translate(-100%, 0)'
        });
      });
    });
    describe('true', function () {
      it('should render the right child', function () {
        var wrapper = (0, _enzyme.shallow)(_ref20, {
          disableLifecycleMethods: true
        });

        _chai.assert.strictEqual(wrapper.text(), 'slide n°1slide n°2slide n°3slide n°4slide n°5');

        _chai.assert.shallowDeepEqual(wrapper.childAt(0).props().style, {
          transition: 'all 0s ease 0s',
          transform: 'translate(-100%, 0)'
        });
      });
    });
  });
  describe('prop: action', function () {
    it('should be able to access updateHeight function', function () {
      var swipeableActions = {};
      (0, _enzyme.mount)(_react.default.createElement(_SwipeableViews.default, {
        action: function action(actions) {
          swipeableActions = actions;
        }
      }, _ref21, _ref22, _ref23));

      _chai.assert.strictEqual(typeof swipeableActions.updateHeight === 'function', true, 'Should be a function.');

      swipeableActions.updateHeight();
    });
  });
});